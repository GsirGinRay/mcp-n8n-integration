#!/usr/bin/env node

/**
 * 🚀 Claude Code n8n-MCP 自定义指令
 * 在 Claude Code 中输入 "n8n-mcp" 即可快速连接MCP和n8n平台
 */

import { spawn } from 'child_process';
import chalk from 'chalk';
import { readFileSync, existsSync } from 'fs';
import { join } from 'path';

class N8nMcpConnector {
    constructor() {
        this.projectRoot = process.cwd();
        this.mcpConfigPath = join(this.projectRoot, 'claude-desktop-config.json');
    }

    showBanner() {
        console.log(chalk.blue.bold('\n🚀 Claude Code n8n-MCP 连接器'));
        console.log(chalk.gray('═'.repeat(40)));
    }

    async checkMcpConfig() {
        console.log(chalk.yellow('📋 检查MCP配置...'));
        
        if (!existsSync(this.mcpConfigPath)) {
            console.log(chalk.red('❌ 未找到MCP配置文件'));
            return false;
        }

        try {
            const config = JSON.parse(readFileSync(this.mcpConfigPath, 'utf8'));
            if (config.mcpServers && config.mcpServers['n8n-expert']) {
                console.log(chalk.green('✅ n8n-expert MCP服务器已配置'));
                return true;
            }
        } catch (error) {
            console.log(chalk.red('❌ MCP配置解析错误'));
        }
        return false;
    }

    async testN8nConnection() {
        console.log(chalk.yellow('🔌 测试n8n连接...'));
        
        try {
            const config = JSON.parse(readFileSync(this.mcpConfigPath, 'utf8'));
            const env = config.mcpServers['n8n-expert']?.env;
            
            if (!env || !env.N8N_BASE_URL || !env.N8N_API_KEY) {
                console.log(chalk.red('❌ MCP配置中缺少n8n连接信息'));
                return false;
            }

            const response = await fetch(`${env.N8N_BASE_URL}/api/v1/workflows`, {
                headers: {
                    'X-N8N-API-KEY': env.N8N_API_KEY,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const data = await response.json();
                console.log(chalk.green(`✅ n8n连接成功 (${data.data?.length || 0} 个工作流)`));
                console.log(chalk.gray(`   平台: ${env.N8N_BASE_URL}`));
                return true;
            } else {
                console.log(chalk.red(`❌ n8n API响应错误: ${response.status}`));
                return false;
            }
        } catch (error) {
            console.log(chalk.red(`❌ n8n连接失败: ${error.message}`));
        }
        return false;
    }

    initMcp() {
        console.log(chalk.yellow('🤖 初始化MCP助手...'));
        
        return new Promise((resolve) => {
            const mcpProcess = spawn('npx', ['-y', 'n8n-mcp', '--help'], {
                stdio: 'pipe',
                shell: true
            });

            mcpProcess.on('close', (code) => {
                console.log(chalk.green('✅ MCP助手已就绪 (535+ n8n节点知识)'));
                resolve(true);
            });

            setTimeout(() => {
                mcpProcess.kill();
                resolve(true);
            }, 3000);
        });
    }

    showUsage() {
        console.log(chalk.blue('\n📚 现在你可以直接在Claude Code中询问:'));
        console.log(chalk.white('   • "帮我设计一个LINE聊天机器人工作流"'));
        console.log(chalk.white('   • "推荐处理CSV数据的n8n节点"'));
        console.log(chalk.white('   • "这个工作流JSON有什么问题吗？"'));
        console.log(chalk.white('   • "如何优化这个n8n工作流的性能？"'));
        
        console.log(chalk.blue('\n🛠️ 工作流管理命令:'));
        console.log(chalk.white('   workflow-manager list          - 列出所有工作流'));
        console.log(chalk.white('   workflow-manager create <type> - 创建新工作流'));
        console.log(chalk.white('   workflow-manager open current  - 打开工作目录'));
    }

    async run() {
        this.showBanner();

        const mcpOk = await this.checkMcpConfig();
        if (!mcpOk) {
            console.log(chalk.red('\n❌ MCP配置异常，请检查 claude-desktop-config.json'));
            return;
        }

        const n8nOk = await this.testN8nConnection();
        await this.initMcp();

        console.log(chalk.blue('\n📊 连接状态:'));
        console.log(`   MCP服务器: ${chalk.green('✅ n8n-expert')}`);
        console.log(`   n8n平台: ${n8nOk ? chalk.green('✅ 已连接') : chalk.yellow('⚠️ 连接异常')}`);
        console.log(`   AI助手: ${chalk.green('✅ 535+ 节点知识已载入')}`);

        if (mcpOk) {
            console.log(chalk.green.bold('\n🎉 n8n-MCP 已就绪！'));
            this.showUsage();
        }

        console.log(chalk.gray('\n💡 提示: MCP会在Claude Code启动时自动连接'));
        console.log('');
    }
}

const connector = new N8nMcpConnector();
connector.run().catch(console.error);